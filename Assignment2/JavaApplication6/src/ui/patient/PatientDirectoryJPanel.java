/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.patient;

import ui.person.*;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.patient.Encounter;
import model.patient.Patient;
import model.person.Community;
import model.person.Person;
import model.person.PersonDirectory;
import model.patient.PatientDirectory;

/**
 *
 * @author dhairyasheel
 */
public class PatientDirectoryJPanel extends javax.swing.JPanel {

    /**
     * Creates new form PersonDirectoryJPanel
     */
     JPanel mainWorkArea;
     private PatientDirectory patientDirectory;
     private PersonDirectory personDirectory;
     List<Patient> patientList;
    public PatientDirectoryJPanel(JPanel mainWorkArea,PatientDirectory patientDirectory, PersonDirectory personDirectory) {
        initComponents();
        this.mainWorkArea = mainWorkArea;
        this.patientDirectory = patientDirectory;
        this.personDirectory = personDirectory;
        this.patientList = patientDirectory.getPatientList();
        //populateCombo();
        populateBP();
        refreshTable();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        communityJC = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPatient = new javax.swing.JTable();
        txtSearch = new javax.swing.JTextField();
        btnDelete = new javax.swing.JButton();
        btnView = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        lblTitle1 = new javax.swing.JLabel();
        btnSearch = new javax.swing.JButton();
        btnLogout = new javax.swing.JButton();
        PersonaljPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblAbnormal = new javax.swing.JTable();

        setBackground(new java.awt.Color(254, 254, 254));

        communityJC.setBackground(new java.awt.Color(254, 254, 254));
        communityJC.setFont(new java.awt.Font("Ubuntu", 0, 15)); // NOI18N
        communityJC.setForeground(new java.awt.Color(120, 149, 162));
        communityJC.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All communities" }));
        communityJC.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        communityJC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                communityJCActionPerformed(evt);
            }
        });

        tblPatient.setFont(new java.awt.Font("Ubuntu", 0, 15)); // NOI18N
        tblPatient.setForeground(new java.awt.Color(100, 149, 162));
        tblPatient.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Person ID", "Name", "Date of Birth", "Community"
            }
        ));
        tblPatient.setGridColor(new java.awt.Color(136, 168, 179));
        tblPatient.setSelectionForeground(new java.awt.Color(100, 149, 162));
        jScrollPane1.setViewportView(tblPatient);

        txtSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchActionPerformed(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(254, 254, 254));
        btnDelete.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(100, 149, 162));
        btnDelete.setText("Delete");
        btnDelete.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnView.setBackground(new java.awt.Color(254, 254, 254));
        btnView.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        btnView.setForeground(new java.awt.Color(100, 149, 162));
        btnView.setText("View ");
        btnView.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        btnAdd.setBackground(new java.awt.Color(254, 254, 254));
        btnAdd.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        btnAdd.setForeground(new java.awt.Color(100, 149, 162));
        btnAdd.setText("Add Patient");
        btnAdd.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        lblTitle1.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        lblTitle1.setForeground(new java.awt.Color(109, 144, 149));
        lblTitle1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle1.setText("Patient Directory");

        btnSearch.setBackground(new java.awt.Color(254, 254, 254));
        btnSearch.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        btnSearch.setForeground(new java.awt.Color(100, 149, 162));
        btnSearch.setText("Search by ID");
        btnSearch.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnLogout.setBackground(new java.awt.Color(254, 254, 254));
        btnLogout.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        btnLogout.setForeground(new java.awt.Color(229, 70, 69));
        btnLogout.setText("LOGOUT");
        btnLogout.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });

        PersonaljPanel3.setBackground(new java.awt.Color(254, 254, 254));
        PersonaljPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(""), "Abnormal Cases", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Ubuntu", 1, 15), new java.awt.Color(242, 76, 66))); // NOI18N

        tblAbnormal.setFont(new java.awt.Font("Ubuntu", 1, 14)); // NOI18N
        tblAbnormal.setForeground(new java.awt.Color(228, 54, 23));
        tblAbnormal.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Community", "Low Blood Pressure", "High Blood Pressure"
            }
        ));
        tblAbnormal.setGridColor(new java.awt.Color(136, 168, 179));
        tblAbnormal.setSelectionForeground(new java.awt.Color(203, 215, 218));
        jScrollPane3.setViewportView(tblAbnormal);

        javax.swing.GroupLayout PersonaljPanel3Layout = new javax.swing.GroupLayout(PersonaljPanel3);
        PersonaljPanel3.setLayout(PersonaljPanel3Layout);
        PersonaljPanel3Layout.setHorizontalGroup(
            PersonaljPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PersonaljPanel3Layout.createSequentialGroup()
                .addContainerGap(33, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 623, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29))
        );
        PersonaljPanel3Layout.setVerticalGroup(
            PersonaljPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PersonaljPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(608, Short.MAX_VALUE)
                .addComponent(btnLogout, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(86, 86, 86))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(132, 132, 132)
                                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnView, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(communityJC, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(258, 258, 258)
                                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 671, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(PersonaljPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(254, 254, 254)
                        .addComponent(lblTitle1, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(lblTitle1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnLogout, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(communityJC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnView, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(PersonaljPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(52, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        int row = tblPatient.getSelectedRow();
        if(row<0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table first", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        Patient patient = ((Patient)tblPatient.getValueAt(row, 0));
        PatientProfileJPanel selectedPanel =new  PatientProfileJPanel (mainWorkArea,patient);
        mainWorkArea.add("PersonDirectoryJPanel", selectedPanel);
        CardLayout layout = (CardLayout) mainWorkArea.getLayout();
        layout.next(mainWorkArea);                 
    }//GEN-LAST:event_btnViewActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:

        AddPatientDirectoryJPanel selectedPanel = new  AddPatientDirectoryJPanel(mainWorkArea,personDirectory,patientDirectory);
        mainWorkArea.add("PersonDirectoryJPanel", selectedPanel);
        CardLayout layout = (CardLayout) mainWorkArea.getLayout();
        layout.next(mainWorkArea);
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        int row = tblPatient.getSelectedRow();
        
        if(row<0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table first", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        Patient patient = ((Patient)tblPatient.getValueAt(row, 0));
        patientDirectory.removePatient(patient);
        populateCombo();
        refreshTable();
        populateBP();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void communityJCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_communityJCActionPerformed
        // TODO add your handling code here:
        populateCombo();
    }//GEN-LAST:event_communityJCActionPerformed

    private void txtSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        int id = Integer.parseInt(txtSearch.getText());
        patientDirectory.searchProduct(id);
        populateSearchTable(id);
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
        // TODO add your handling code here:
        mainWorkArea.remove(this);
        CardLayout layout = (CardLayout)mainWorkArea.getLayout();
        layout.previous(mainWorkArea);
    }//GEN-LAST:event_btnLogoutActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel PersonaljPanel3;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnLogout;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnView;
    private javax.swing.JComboBox<String> communityJC;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblTitle1;
    private javax.swing.JTable tblAbnormal;
    private javax.swing.JTable tblPatient;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables

    void refreshTable() {
        String selectedSupplier = (String) communityJC.getSelectedItem();
        if("All Communities".equals(selectedSupplier)){
            DefaultTableModel model = (DefaultTableModel)tblPatient.getModel();
            model.setRowCount(0);
            for(Patient p: patientDirectory.getPatientList()) {
                Object row[] = new Object[4];
                row[0] = p;
                row[1] = p.getPatient().getName();
                row[2] = p.getPatient().getDate();
                row[3] = p.getPatient().getAddress().getCommunity();
                
               // row[1] = s.getProductCatalog().getProductCount() == 0 ? "None" : s.getProductCatalog().getProductCount();
                model.addRow(row);
            }
                
        } else {
            DefaultTableModel model = (DefaultTableModel)tblPatient.getModel();
            model.setRowCount(0);
            for(Patient p: patientDirectory.getPatientList()) {
                if(p.getAddress().getCommunity().equals(selectedSupplier)){
                    Object row[] = new Object[4];
                    row[0] = p;
                    row[1] = p.getPatient().getName();
                    row[2] = p.getPatient().getDate();;
                    row[3] = p.getPatient().getAddress().getCommunity();
                   // row[1] = s.getProductCatalog().getProductCount() == 0 ? "None" : s.getProductCatalog().getProductCount();
                    model.addRow(row);
                } 
                
            }
        }
        
    }
    
    List<String> sorted = new ArrayList<>();
    void populateCombo() {
       communityJC.removeAllItems();
        communityJC.addItem("All Communities");
        for(Patient s: patientList){
            if(!sorted.contains(s.getPatient().getAddress().getCommunity())){
                sorted.add(s.getPatient().getAddress().getCommunity());
            }
        }
       for(String s: sorted){
           communityJC.addItem(s);
        }
       
       refreshTable();
    }
    
    void populateBP(){
        DefaultTableModel tbl = (DefaultTableModel)tblAbnormal.getModel();
        tbl.setRowCount(0);
        for(int i =0; i < sorted.size(); i++){
            Object row[] = new Object[3];
            row[0] = sorted.get(i);
            int high = 0, low = 0;
            for(Patient s: patientList){
                if(sorted.get(i).equals(s.getPatient().getAddress().getCommunity())){
                    if("High".equals(s.isHighBP())){
                        high= high+1;
                    } else if("Low".equals(s.isHighBP())){
                        low = low+1;
                    }
                }
            }
            row[1] = low;
            row[2] = high;
            tbl.addRow(row);
        }
    }

    private void populateSearchTable(int id) {
        DefaultTableModel model = (DefaultTableModel)tblPatient.getModel();
            model.setRowCount(0);
            for(Patient p: patientDirectory.getPatientList()) {
                if(p.getPatient().getId()== (id)){
                    Object row[] = new Object[4];
                    row[0] = p;
                    row[1] = p.getPatient().getName();
                    row[2] = p.getPatient().getDate();;
                    row[3] = p.getPatient().getAddress().getCommunity();
                   // row[1] = s.getProductCatalog().getProductCount() == 0 ? "None" : s.getProductCatalog().getProductCount();
                    model.addRow(row);
                } 
                
            }
    }
}
